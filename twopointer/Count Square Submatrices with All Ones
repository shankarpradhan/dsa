/*
count the number of square submatrices in which each index has a value equal to 1.
Qlink: https://leetcode.com/problems/count-square-submatrices-with-all-ones/description/
to solve the main problem first solve below problems: 
i. try to find all the submatrix sum possible from top-left element of the matrix
ii. try to find the sum of submatrixes

//brute-force-approach: whenever we found the value of the matrix is 1,  try to find all valid subarray from that point by traveling in square shape (just increase the both row and column by 1)

//optimzed-approch:
*/

#include<bits/stdc++.h>
using namespace std;

int countSquares(vector<vector<int>>& matrix) {
    int n = matrix.size();
    int m = matrix[0].size();
    vector<vector<int>>prefSum(n+1, vector<int>(m+1, 0));
    for(int i = 1; i <= n; i++){
        for(int j = 1; j <= m; j++){
            prefSum[i][j] = matrix[i-1][j-1] + prefSum[i-1][j]+prefSum[i][j-1] - prefSum[i-1][j-1];
        }
    }
    int cnt = 0;
    for(int i = 1; i <= n; i++){
        for(int j = 1; j <= m; j++){
            int a = i, b = j;
            if(matrix[i-1][j-1]==1){
                while(a<=n && b<=m){
                    int sum = prefSum[a][b] - (prefSum[i-1][b]+prefSum[a][j-1]) + prefSum[i-1][j-1];
                    //cout << a << " " << b << " " << sum << endl;
                    int v = a-i+1;
                    if((a==i && b==j) || sum==v*v){
                        cnt++;
                    }
                    else{
                        break;
                    }
                    a++;b++;
                }
            }
        }
    }
    return cnt;
}

int main(){
    int n,m;
    cin >> n >> m;
    vector<vector<int>> matrix(n, vector<int>(m));
    for(int i = 0; i < n; i++){
        for(int j = 0; j < m; j++){
            cin >> matrix[i][j];
        }
    }  

    cout << countSquares(matrix) << "\n";
    
    return 0;
}
